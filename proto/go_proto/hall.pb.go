// protoc -I . hall.proto --go_out=plugins=grpc:.
// protoc -I . hall.proto --grpc-gateway_out . --go_out=plugins=grpc:.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: hall.proto

package go_proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AccountId  int64  `protobuf:"varint,2,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Capacity   int64  `protobuf:"varint,4,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	LocationId int64  `protobuf:"varint,5,opt,name=LocationId,proto3" json:"LocationId,omitempty"`
}

func (x *HallRequest) Reset() {
	*x = HallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hall_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallRequest) ProtoMessage() {}

func (x *HallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hall_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallRequest.ProtoReflect.Descriptor instead.
func (*HallRequest) Descriptor() ([]byte, []int) {
	return file_hall_proto_rawDescGZIP(), []int{0}
}

func (x *HallRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HallRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *HallRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HallRequest) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *HallRequest) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type HallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AccountId  int64  `protobuf:"varint,2,opt,name=AccountId,proto3" json:"AccountId,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Capacity   int64  `protobuf:"varint,4,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	LocationId int64  `protobuf:"varint,5,opt,name=LocationId,proto3" json:"LocationId,omitempty"`
}

func (x *HallResponse) Reset() {
	*x = HallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hall_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HallResponse) ProtoMessage() {}

func (x *HallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hall_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HallResponse.ProtoReflect.Descriptor instead.
func (*HallResponse) Descriptor() ([]byte, []int) {
	return file_hall_proto_rawDescGZIP(), []int{1}
}

func (x *HallResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *HallResponse) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *HallResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HallResponse) GetCapacity() int64 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *HallResponse) GetLocationId() int64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

type IdHallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdHallRequest) Reset() {
	*x = IdHallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hall_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdHallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdHallRequest) ProtoMessage() {}

func (x *IdHallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_hall_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdHallRequest.ProtoReflect.Descriptor instead.
func (*IdHallRequest) Descriptor() ([]byte, []int) {
	return file_hall_proto_rawDescGZIP(), []int{2}
}

func (x *IdHallRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdHallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdHallResponse) Reset() {
	*x = IdHallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hall_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdHallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdHallResponse) ProtoMessage() {}

func (x *IdHallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hall_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdHallResponse.ProtoReflect.Descriptor instead.
func (*IdHallResponse) Descriptor() ([]byte, []int) {
	return file_hall_proto_rawDescGZIP(), []int{3}
}

func (x *IdHallResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StatusHallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusHallResponse) Reset() {
	*x = StatusHallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hall_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusHallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusHallResponse) ProtoMessage() {}

func (x *StatusHallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_hall_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusHallResponse.ProtoReflect.Descriptor instead.
func (*StatusHallResponse) Descriptor() ([]byte, []int) {
	return file_hall_proto_rawDescGZIP(), []int{4}
}

func (x *StatusHallResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_hall_proto protoreflect.FileDescriptor

var file_hall_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x68, 0x61,
	0x6c, 0x6c, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8b, 0x01, 0x0a, 0x0b, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x8c,
	0x01, 0x0a, 0x0c, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1f, 0x0a,
	0x0d, 0x49, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20,
	0x0a, 0x0e, 0x49, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2e, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x32, 0xd8, 0x02, 0x0a, 0x0b, 0x48, 0x61, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x11,
	0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a,
	0x12, 0x56, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x13,
	0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68,
	0x61, 0x6c, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x52, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x11, 0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x68, 0x61, 0x6c, 0x6c,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x1a, 0x0c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x68, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x4d, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x48, 0x61, 0x6c, 0x6c, 0x12, 0x13, 0x2e, 0x68, 0x61, 0x6c, 0x6c, 0x2e, 0x49,
	0x64, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x68,
	0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x68, 0x61, 0x6c, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x0b, 0x5a, 0x09, 0x2f,
	0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hall_proto_rawDescOnce sync.Once
	file_hall_proto_rawDescData = file_hall_proto_rawDesc
)

func file_hall_proto_rawDescGZIP() []byte {
	file_hall_proto_rawDescOnce.Do(func() {
		file_hall_proto_rawDescData = protoimpl.X.CompressGZIP(file_hall_proto_rawDescData)
	})
	return file_hall_proto_rawDescData
}

var file_hall_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_hall_proto_goTypes = []interface{}{
	(*HallRequest)(nil),        // 0: hall.HallRequest
	(*HallResponse)(nil),       // 1: hall.HallResponse
	(*IdHallRequest)(nil),      // 2: hall.IdHallRequest
	(*IdHallResponse)(nil),     // 3: hall.IdHallResponse
	(*StatusHallResponse)(nil), // 4: hall.StatusHallResponse
}
var file_hall_proto_depIdxs = []int32{
	0, // 0: hall.HallService.CreateHall:input_type -> hall.HallRequest
	2, // 1: hall.HallService.DeleteHall:input_type -> hall.IdHallRequest
	0, // 2: hall.HallService.UpdateHall:input_type -> hall.HallRequest
	2, // 3: hall.HallService.GetHall:input_type -> hall.IdHallRequest
	3, // 4: hall.HallService.CreateHall:output_type -> hall.IdHallResponse
	4, // 5: hall.HallService.DeleteHall:output_type -> hall.StatusHallResponse
	4, // 6: hall.HallService.UpdateHall:output_type -> hall.StatusHallResponse
	1, // 7: hall.HallService.GetHall:output_type -> hall.HallResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hall_proto_init() }
func file_hall_proto_init() {
	if File_hall_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hall_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hall_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hall_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdHallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hall_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdHallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hall_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusHallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hall_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hall_proto_goTypes,
		DependencyIndexes: file_hall_proto_depIdxs,
		MessageInfos:      file_hall_proto_msgTypes,
	}.Build()
	File_hall_proto = out.File
	file_hall_proto_rawDesc = nil
	file_hall_proto_goTypes = nil
	file_hall_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HallServiceClient is the client API for HallService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HallServiceClient interface {
	CreateHall(ctx context.Context, in *HallRequest, opts ...grpc.CallOption) (*IdHallResponse, error)
	DeleteHall(ctx context.Context, in *IdHallRequest, opts ...grpc.CallOption) (*StatusHallResponse, error)
	UpdateHall(ctx context.Context, in *HallRequest, opts ...grpc.CallOption) (*StatusHallResponse, error)
	GetHall(ctx context.Context, in *IdHallRequest, opts ...grpc.CallOption) (*HallResponse, error)
}

type hallServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHallServiceClient(cc grpc.ClientConnInterface) HallServiceClient {
	return &hallServiceClient{cc}
}

func (c *hallServiceClient) CreateHall(ctx context.Context, in *HallRequest, opts ...grpc.CallOption) (*IdHallResponse, error) {
	out := new(IdHallResponse)
	err := c.cc.Invoke(ctx, "/hall.HallService/CreateHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallServiceClient) DeleteHall(ctx context.Context, in *IdHallRequest, opts ...grpc.CallOption) (*StatusHallResponse, error) {
	out := new(StatusHallResponse)
	err := c.cc.Invoke(ctx, "/hall.HallService/DeleteHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallServiceClient) UpdateHall(ctx context.Context, in *HallRequest, opts ...grpc.CallOption) (*StatusHallResponse, error) {
	out := new(StatusHallResponse)
	err := c.cc.Invoke(ctx, "/hall.HallService/UpdateHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hallServiceClient) GetHall(ctx context.Context, in *IdHallRequest, opts ...grpc.CallOption) (*HallResponse, error) {
	out := new(HallResponse)
	err := c.cc.Invoke(ctx, "/hall.HallService/GetHall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HallServiceServer is the server API for HallService service.
type HallServiceServer interface {
	CreateHall(context.Context, *HallRequest) (*IdHallResponse, error)
	DeleteHall(context.Context, *IdHallRequest) (*StatusHallResponse, error)
	UpdateHall(context.Context, *HallRequest) (*StatusHallResponse, error)
	GetHall(context.Context, *IdHallRequest) (*HallResponse, error)
}

// UnimplementedHallServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHallServiceServer struct {
}

func (*UnimplementedHallServiceServer) CreateHall(context.Context, *HallRequest) (*IdHallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHall not implemented")
}
func (*UnimplementedHallServiceServer) DeleteHall(context.Context, *IdHallRequest) (*StatusHallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHall not implemented")
}
func (*UnimplementedHallServiceServer) UpdateHall(context.Context, *HallRequest) (*StatusHallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHall not implemented")
}
func (*UnimplementedHallServiceServer) GetHall(context.Context, *IdHallRequest) (*HallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHall not implemented")
}

func RegisterHallServiceServer(s *grpc.Server, srv HallServiceServer) {
	s.RegisterService(&_HallService_serviceDesc, srv)
}

func _HallService_CreateHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).CreateHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hall.HallService/CreateHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).CreateHall(ctx, req.(*HallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallService_DeleteHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).DeleteHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hall.HallService/DeleteHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).DeleteHall(ctx, req.(*IdHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallService_UpdateHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).UpdateHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hall.HallService/UpdateHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).UpdateHall(ctx, req.(*HallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HallService_GetHall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdHallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HallServiceServer).GetHall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hall.HallService/GetHall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HallServiceServer).GetHall(ctx, req.(*IdHallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HallService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hall.HallService",
	HandlerType: (*HallServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHall",
			Handler:    _HallService_CreateHall_Handler,
		},
		{
			MethodName: "DeleteHall",
			Handler:    _HallService_DeleteHall_Handler,
		},
		{
			MethodName: "UpdateHall",
			Handler:    _HallService_UpdateHall_Handler,
		},
		{
			MethodName: "GetHall",
			Handler:    _HallService_GetHall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hall.proto",
}
