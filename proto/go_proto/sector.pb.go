// protoc -I . sector.proto --go_out=plugins=grpc:.
// protoc -I . sector.proto --grpc-gateway_out . --go_out=plugins=grpc:.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: sector.proto

package go_proto

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SectorRequest) Reset() {
	*x = SectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sector_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectorRequest) ProtoMessage() {}

func (x *SectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sector_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectorRequest.ProtoReflect.Descriptor instead.
func (*SectorRequest) Descriptor() ([]byte, []int) {
	return file_sector_proto_rawDescGZIP(), []int{0}
}

func (x *SectorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *SectorResponse) Reset() {
	*x = SectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sector_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SectorResponse) ProtoMessage() {}

func (x *SectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sector_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SectorResponse.ProtoReflect.Descriptor instead.
func (*SectorResponse) Descriptor() ([]byte, []int) {
	return file_sector_proto_rawDescGZIP(), []int{1}
}

func (x *SectorResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SectorResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type IdSectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdSectorRequest) Reset() {
	*x = IdSectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sector_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdSectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdSectorRequest) ProtoMessage() {}

func (x *IdSectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sector_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdSectorRequest.ProtoReflect.Descriptor instead.
func (*IdSectorRequest) Descriptor() ([]byte, []int) {
	return file_sector_proto_rawDescGZIP(), []int{2}
}

func (x *IdSectorRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type IdSectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdSectorResponse) Reset() {
	*x = IdSectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sector_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdSectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdSectorResponse) ProtoMessage() {}

func (x *IdSectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sector_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdSectorResponse.ProtoReflect.Descriptor instead.
func (*IdSectorResponse) Descriptor() ([]byte, []int) {
	return file_sector_proto_rawDescGZIP(), []int{3}
}

func (x *IdSectorResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type StatusSectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StatusSectorResponse) Reset() {
	*x = StatusSectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sector_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusSectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusSectorResponse) ProtoMessage() {}

func (x *StatusSectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_sector_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusSectorResponse.ProtoReflect.Descriptor instead.
func (*StatusSectorResponse) Descriptor() ([]byte, []int) {
	return file_sector_proto_rawDescGZIP(), []int{4}
}

func (x *StatusSectorResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_sector_proto protoreflect.FileDescriptor

var file_sector_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0e, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x21, 0x0a, 0x0f, 0x49, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x49, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x8a, 0x03, 0x0a, 0x0d, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x64, 0x53, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x49, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x2a, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x5e, 0x0a, 0x0c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x1a, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0x59, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x49, 0x64, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x12, 0x13, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sector_proto_rawDescOnce sync.Once
	file_sector_proto_rawDescData = file_sector_proto_rawDesc
)

func file_sector_proto_rawDescGZIP() []byte {
	file_sector_proto_rawDescOnce.Do(func() {
		file_sector_proto_rawDescData = protoimpl.X.CompressGZIP(file_sector_proto_rawDescData)
	})
	return file_sector_proto_rawDescData
}

var file_sector_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sector_proto_goTypes = []interface{}{
	(*SectorRequest)(nil),        // 0: sector.SectorRequest
	(*SectorResponse)(nil),       // 1: sector.SectorResponse
	(*IdSectorRequest)(nil),      // 2: sector.IdSectorRequest
	(*IdSectorResponse)(nil),     // 3: sector.IdSectorResponse
	(*StatusSectorResponse)(nil), // 4: sector.StatusSectorResponse
}
var file_sector_proto_depIdxs = []int32{
	0, // 0: sector.SectorService.CreateSector:input_type -> sector.SectorRequest
	2, // 1: sector.SectorService.DeleteSector:input_type -> sector.IdSectorRequest
	0, // 2: sector.SectorService.UpdateSector:input_type -> sector.SectorRequest
	2, // 3: sector.SectorService.GetSector:input_type -> sector.IdSectorRequest
	3, // 4: sector.SectorService.CreateSector:output_type -> sector.IdSectorResponse
	4, // 5: sector.SectorService.DeleteSector:output_type -> sector.StatusSectorResponse
	4, // 6: sector.SectorService.UpdateSector:output_type -> sector.StatusSectorResponse
	1, // 7: sector.SectorService.GetSector:output_type -> sector.SectorResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sector_proto_init() }
func file_sector_proto_init() {
	if File_sector_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sector_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sector_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sector_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdSectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sector_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdSectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sector_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusSectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sector_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sector_proto_goTypes,
		DependencyIndexes: file_sector_proto_depIdxs,
		MessageInfos:      file_sector_proto_msgTypes,
	}.Build()
	File_sector_proto = out.File
	file_sector_proto_rawDesc = nil
	file_sector_proto_goTypes = nil
	file_sector_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SectorServiceClient is the client API for SectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SectorServiceClient interface {
	CreateSector(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*IdSectorResponse, error)
	DeleteSector(ctx context.Context, in *IdSectorRequest, opts ...grpc.CallOption) (*StatusSectorResponse, error)
	UpdateSector(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*StatusSectorResponse, error)
	GetSector(ctx context.Context, in *IdSectorRequest, opts ...grpc.CallOption) (*SectorResponse, error)
}

type sectorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSectorServiceClient(cc grpc.ClientConnInterface) SectorServiceClient {
	return &sectorServiceClient{cc}
}

func (c *sectorServiceClient) CreateSector(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*IdSectorResponse, error) {
	out := new(IdSectorResponse)
	err := c.cc.Invoke(ctx, "/sector.SectorService/CreateSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectorServiceClient) DeleteSector(ctx context.Context, in *IdSectorRequest, opts ...grpc.CallOption) (*StatusSectorResponse, error) {
	out := new(StatusSectorResponse)
	err := c.cc.Invoke(ctx, "/sector.SectorService/DeleteSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectorServiceClient) UpdateSector(ctx context.Context, in *SectorRequest, opts ...grpc.CallOption) (*StatusSectorResponse, error) {
	out := new(StatusSectorResponse)
	err := c.cc.Invoke(ctx, "/sector.SectorService/UpdateSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sectorServiceClient) GetSector(ctx context.Context, in *IdSectorRequest, opts ...grpc.CallOption) (*SectorResponse, error) {
	out := new(SectorResponse)
	err := c.cc.Invoke(ctx, "/sector.SectorService/GetSector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SectorServiceServer is the server API for SectorService service.
type SectorServiceServer interface {
	CreateSector(context.Context, *SectorRequest) (*IdSectorResponse, error)
	DeleteSector(context.Context, *IdSectorRequest) (*StatusSectorResponse, error)
	UpdateSector(context.Context, *SectorRequest) (*StatusSectorResponse, error)
	GetSector(context.Context, *IdSectorRequest) (*SectorResponse, error)
}

// UnimplementedSectorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSectorServiceServer struct {
}

func (*UnimplementedSectorServiceServer) CreateSector(context.Context, *SectorRequest) (*IdSectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSector not implemented")
}
func (*UnimplementedSectorServiceServer) DeleteSector(context.Context, *IdSectorRequest) (*StatusSectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSector not implemented")
}
func (*UnimplementedSectorServiceServer) UpdateSector(context.Context, *SectorRequest) (*StatusSectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSector not implemented")
}
func (*UnimplementedSectorServiceServer) GetSector(context.Context, *IdSectorRequest) (*SectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSector not implemented")
}

func RegisterSectorServiceServer(s *grpc.Server, srv SectorServiceServer) {
	s.RegisterService(&_SectorService_serviceDesc, srv)
}

func _SectorService_CreateSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectorServiceServer).CreateSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sector.SectorService/CreateSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectorServiceServer).CreateSector(ctx, req.(*SectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectorService_DeleteSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdSectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectorServiceServer).DeleteSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sector.SectorService/DeleteSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectorServiceServer).DeleteSector(ctx, req.(*IdSectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectorService_UpdateSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectorServiceServer).UpdateSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sector.SectorService/UpdateSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectorServiceServer).UpdateSector(ctx, req.(*SectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SectorService_GetSector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdSectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SectorServiceServer).GetSector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sector.SectorService/GetSector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SectorServiceServer).GetSector(ctx, req.(*IdSectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sector.SectorService",
	HandlerType: (*SectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSector",
			Handler:    _SectorService_CreateSector_Handler,
		},
		{
			MethodName: "DeleteSector",
			Handler:    _SectorService_DeleteSector_Handler,
		},
		{
			MethodName: "UpdateSector",
			Handler:    _SectorService_UpdateSector_Handler,
		},
		{
			MethodName: "GetSector",
			Handler:    _SectorService_GetSector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sector.proto",
}
